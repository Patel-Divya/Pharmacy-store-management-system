Entity: User, orders, Drugs, membership, stores, store transection

Also, view type: User: Order, account info, order info, List of drugs in nearby store
		 Admin: View of all drugs in perticullar store, Membership check, Transection check, bills


Used queries:-
create table stores(
     sid int primary key auto_increment,
     email varchar(100) unique,
     password varchar(200),
     phone bigintint unique,
     state varchar(20),
     city varchar(20),
     address varchar(100),
     pincode int(6));

create table drugs(
     did int primary key auto_increment,
     sid int,
     name varchar(100) not null,
     manufacture varchar(50),
     drug_use varchar(100),
     power varchar(10),
     quantity bigintint,
     MFD date,
     EXP date,
     additional_info varchar(150),
     price decimal(10,2),
     foreign key (sid) references stores(sid)
     );

create table store_bills(
	 bill_id bigint auto_increment primary key,
         sid int,
         customer_name varchar(100),
         customer_email varchar(100),
         items varchar(5000),
         total_price decimal(10,2),
         Date_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, foreign key (sid) references stores(sid));
         

Can be addedd queries:
create table user(
     uid int primary key auto_increment,
     user_name varchar(50),
     email varchar(100) unique not null,
     phone int(10) unique not null,
     pass varchar(20),
     state varchar(20),
     city varchar(20),
     address varchar(100),
     pincode int(6),
     annual_membership int default null);

create table bills(
     sid int,
     coustomer_id varchar(50),
     items_quantity varchar(1000),
     date_time timestamp,
     foreign key (sid) references stores(sid));


 create table orders(
     oid int primary key auto_increment,
     uid int,
     sid int,
     item_name varchar(100),
     quantity int(3),
     price int(4),
     shipping_charge int(3),
     date_time timestamp,
     foreign key (uid) references user(uid),
     foreign key (sid) references stores(sid));






In the provided Node.js code, `Math.random()` is a built-in JavaScript function that generates a pseudo-random floating-point number between 0 (inclusive) and 1 (exclusive). Here's how it works:

1. **Math.random()**: When called, `Math.random()` returns a random floating-point number greater than or equal to 0 and less than 1. For example, it might return 0.5647396320546235.

2. **toString(36)**: We're converting the random number to a string using the `toString()` method. By passing `36` as an argument to `toString()`, we're converting the number to a base-36 representation. In base-36, numbers are represented using digits 0-9 and letters a-z. This allows us to generate alphanumeric strings.

3. **substring(2)**: After converting the number to a base-36 string, we use `substring(2)` to remove the first two characters. This is because the string representation of the random number generated by `Math.random()` starts with "0." due to the decimal point. By removing these characters, we get a shorter and cleaner random string.

Combining these steps, `Math.random().toString(36).substring(2)` generates a random alphanumeric string. This string is used as a session token or identifier for the user's session. While `Math.random()` produces a pseudo-random number and is not suitable for cryptographic purposes, it's often used for generating unique identifiers or tokens in non-security-sensitive applications like session management.